package utils

import (
	"fmt"
	"strconv"
	"strings"

	"hh-vacancy-bot/internal/api/headhunter"
	"hh-vacancy-bot/internal/models"
)

var snippetHighlightReplacer = strings.NewReplacer("<highlighttext>", "", "</highlighttext>", "")

// Format vacancy for Telegram
func FormatVacancy(vacancy *headhunter.VacancyItem) string {
	var sb strings.Builder

	// Vacancy name in bold
	sb.WriteString(fmt.Sprintf("*%s*\n\n", EscapeMarkdown(vacancy.Name)))

	// Company
	if vacancy.Employer.Name != "" {
		sb.WriteString(fmt.Sprintf("üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* %s\n", EscapeMarkdown(vacancy.Employer.Name)))
	}

	// Paycheck
	if vacancy.Salary != nil {
		salaryStr := EscapeMarkdown(FormatSalary(vacancy.Salary))
		sb.WriteString(fmt.Sprintf("üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* %s\n", salaryStr))
	} else {
		sb.WriteString("üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n")
	}

	// City
	sb.WriteString(fmt.Sprintf("üìç *–ì–æ—Ä–æ–¥:* %s\n", EscapeMarkdown(vacancy.Area.Name)))

	// Experience
	if vacancy.Experience != nil {
		sb.WriteString(fmt.Sprintf("üíº *–û–ø—ã—Ç:* %s\n", EscapeMarkdown(vacancy.Experience.Name)))
	}

	// Hours
	if vacancy.Schedule != nil {
		sb.WriteString(fmt.Sprintf("‚è∞ *–ì—Ä–∞—Ñ–∏–∫:* %s\n", EscapeMarkdown(vacancy.Schedule.Name)))
	}

	// Employment type
	if vacancy.Employment != nil {
		sb.WriteString(fmt.Sprintf("üìã *–ó–∞–Ω—è—Ç–æ—Å—Ç—å:* %s\n", EscapeMarkdown(vacancy.Employment.Name)))
	}

	if len(vacancy.ProfessionalRoles) > 0 {
		roles := make([]string, 0, len(vacancy.ProfessionalRoles))
		for _, role := range vacancy.ProfessionalRoles {
			if role.Name != "" {
				roles = append(roles, role.Name)
			}
		}
		if len(roles) > 0 {
			sb.WriteString(fmt.Sprintf("üß≠ *–ü—Ä–æ—Ñ–∏–ª—å:* %s\n", EscapeMarkdown(strings.Join(roles, ", "))))
		}
	}

	if vacancy.Snippet != nil {
		if vacancy.Snippet.Requirement != nil {
			if requirement := formatSnippetField(*vacancy.Snippet.Requirement); requirement != "" {
				sb.WriteString(fmt.Sprintf("üó£Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* %s\n", EscapeMarkdown(requirement)))
			}
		}
		if vacancy.Snippet.Responsibility != nil {
			if responsibility := formatSnippetField(*vacancy.Snippet.Responsibility); responsibility != "" {
				sb.WriteString(fmt.Sprintf("‚úçÔ∏è *–ó–∞–¥–∞—á–∏:* %s\n", EscapeMarkdown(responsibility)))
			}
		}
	}

	// Published date
	publishedDate := vacancy.PublishedAt.Format("02.01.2006")
	sb.WriteString(fmt.Sprintf("üìÖ *–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:* %s\n", EscapeMarkdown(publishedDate)))

	// Link
	sb.WriteString(fmt.Sprintf("\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é](%s)", escapeMarkdownURL(vacancy.AlternateURL)))

	return sb.String()
}

func FormatSalary(salary *headhunter.Salary) string {
	currency := salary.Currency
	if currency == "RUR" || currency == "RUB" {
		currency = "‚ÇΩ"
	} else if currency == "USD" {
		currency = "$"
	} else if currency == "EUR" {
		currency = "‚Ç¨"
	}

	gross := ""
	if salary.Gross {
		gross = " (–¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤)"
	}

	if salary.From != nil && salary.To != nil {
		// Changed order: currency symbol after amount (Russian style)
		return fmt.Sprintf("%d - %d %s%s", *salary.From, *salary.To, currency, gross)
	} else if salary.From != nil {
		return fmt.Sprintf("–æ—Ç %d %s%s", *salary.From, currency, gross)
	} else if salary.To != nil {
		return fmt.Sprintf("–¥–æ %d %s%s", *salary.To, currency, gross)
	}

	return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
}

func FormatVacancyList(vacancies []headhunter.VacancyItem, total int) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üìã *–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:* %d\n", total))
	sb.WriteString(fmt.Sprintf("*–ü–æ–∫–∞–∑–∞–Ω–æ:* %d\n\n", len(vacancies)))

	for i, vacancy := range vacancies {
		sb.WriteString(fmt.Sprintf("*%d\\. %s*\n", i+1, EscapeMarkdown(vacancy.Name)))

		if vacancy.Employer.Name != "" {
			sb.WriteString(fmt.Sprintf("   üè¢ %s\n", EscapeMarkdown(vacancy.Employer.Name)))
		}

		if vacancy.Salary != nil {
			sb.WriteString(fmt.Sprintf("   üí∞ %s\n", EscapeMarkdown(FormatSalary(vacancy.Salary))))
		}

		sb.WriteString(fmt.Sprintf("   üìç %s\n", EscapeMarkdown(vacancy.Area.Name)))
		sb.WriteString("\n")
	}

	return sb.String()
}

func FormatUserFilters(filters map[string]string, cities []headhunter.City) string {
	var sb strings.Builder

	sb.WriteString("*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n\n")

	if len(filters) == 0 {
		sb.WriteString("_–§–∏–ª—å—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã_\n")
		return sb.String()
	}

	if text, ok := filters[models.FilterTypeText]; ok && text != "" {
		sb.WriteString(fmt.Sprintf("üîç *–¢–µ–∫—Å—Ç:* %s\n", EscapeMarkdown(text)))
	}

	if areaID, ok := filters[models.FilterTypeArea]; ok && areaID != "" {
		cityName := areaID
		for _, city := range cities {
			if city.ID == areaID {
				cityName = city.Name
				break
			}
		}
		sb.WriteString(fmt.Sprintf("üìç *–ì–æ—Ä–æ–¥:* %s\n", EscapeMarkdown(cityName)))
	}

	if salary, ok := filters[models.FilterTypeSalary]; ok && salary != "" {
		sb.WriteString(fmt.Sprintf("üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç:* %s ‚ÇΩ\n", salary))
	}

	if exp, ok := filters[models.FilterTypeExperience]; ok && exp != "" {
		expName := models.ExperienceDisplayNames[exp]
		if expName == "" {
			expName = exp
		}
		sb.WriteString(fmt.Sprintf("üíº *–û–ø—ã—Ç:* %s\n", EscapeMarkdown(expName)))
	}

	if schedule, ok := filters[models.FilterTypeSchedule]; ok && schedule != "" {
		scheduleName := models.ScheduleDisplayNames[schedule]
		if scheduleName == "" {
			scheduleName = schedule
		}
		sb.WriteString(fmt.Sprintf("‚è∞ *–ì—Ä–∞—Ñ–∏–∫:* %s\n", EscapeMarkdown(scheduleName)))
	}

	return sb.String()
}

func FormatWelcomeMessage(firstName string) string {
	name := firstName
	if name == "" {
		name = "–¥—Ä—É–≥"
	}

	var sb strings.Builder
	sb.WriteString("üëã –ü—Ä–∏–≤–µ—Ç, *")
	sb.WriteString(EscapeMarkdown(name))
	sb.WriteString("*\n")
	sb.WriteString(EscapeMarkdown("–Ø ‚Äì –õ–∏–Ω–≥–≤–æ–∫–æ—Ç!üòºüîé –Ø –ø–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ª–∏–Ω–≥–≤–∏—Å—Ç–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ!) –Ω–∞ HeadHunter."))
	sb.WriteString("\n\n")
	sb.WriteString("‚Ä¢ ")
	sb.WriteString(EscapeMarkdown("–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç ¬´–ª–∏–Ω–≥–≤–∏—Å—Ç¬ª, ¬´–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª, ¬´NLP¬ª"))
	sb.WriteString("\n")
	sb.WriteString("‚Ä¢ ")
	sb.WriteString(EscapeMarkdown("–ö–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–¥–µ–ª—è—é—Ç —è–∑—ã–∫–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å"))
	sb.WriteString("\n\n")
	sb.WriteString(EscapeMarkdown("–ö–æ–º–∞–Ω–¥—ã: /vacancies, /settings, /help"))
	sb.WriteString("\n\n")
	sb.WriteString(EscapeMarkdown("–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π —è–∑—ã–∫, –≥–æ—Ä–æ–¥ –∏ —É—Å–ª–æ–≤–∏—è –≤ /filters"))

	return sb.String()
}

func FormatHelpMessage() string {
	return `*üìñ –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start \- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/filters \- –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
/vacancies \- –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
/settings \- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help \- —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:*

1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /filters
   \- –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥
   \- –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
   \- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
   \- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
   \- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /vacancies

3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ /settings

*–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:* @dinabyebye & @theweirdfulmurk`
}

func FormatNoFiltersMessage() string {
	return `‚ö†Ô∏è *–§–∏–ª—å—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã*

–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º ¬´–ª–∏–Ω–≥–≤–∏—Å—Ç¬ª, ¬´–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª, ¬´NLP¬ª —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.
–î–æ–±–∞–≤—å—Ç–µ —è–∑—ã–∫, –≥–æ—Ä–æ–¥ –∏ —É—Å–ª–æ–≤–∏—è —á–µ—Ä–µ–∑ /filters, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\.`
}

func FormatNoVacanciesMessage() string {
	return `üòî *–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /filters`
}

func FormatSettingsMessage(user *models.User) string {
	var sb strings.Builder

	sb.WriteString("*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n")

	status := "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
	if user.CheckEnabled {
		status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã"
	}
	sb.WriteString(fmt.Sprintf("*–°—Ç–∞—Ç—É—Å:* %s\n", status))

	sb.WriteString(fmt.Sprintf("*–ò–Ω—Ç–µ—Ä–≤–∞–ª:* –∫–∞–∂–¥—ã–µ %d –º–∏–Ω—É—Ç\n", user.NotifyInterval))

	return sb.String()
}

func FormatFiltersMessage(filters []models.UserFilter) string {
	if len(filters) == 0 {
		return "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"
	}

	var sb strings.Builder
	sb.WriteString("*üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:*\n\n")

	for _, filter := range filters {
		filterName := getFilterDisplayName(filter.FilterType)
		filterValue := formatFilterValue(filter.FilterType, filter.FilterValue)

		sb.WriteString(fmt.Sprintf("‚Ä¢ *%s:* %s\n",
			EscapeMarkdown(filterName),
			EscapeMarkdown(filterValue),
		))
	}

	return sb.String()
}

func getFilterDisplayName(filterType string) string {
	switch filterType {
	case models.FilterTypeText:
		return "–¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞"
	case models.FilterTypeArea:
		return "–ì–æ—Ä–æ–¥"
	case models.FilterTypeSalary:
		return "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
	case models.FilterTypeExperience:
		return "–û–ø—ã—Ç"
	case models.FilterTypeSchedule:
		return "–ì—Ä–∞—Ñ–∏–∫"
	case models.FilterTypePublishedWithin:
		return "–ü–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
	default:
		return filterType
	}
}

func formatFilterValue(filterType, value string) string {
	switch filterType {
	case models.FilterTypeSalary:
		return value + " ‚ÇΩ"
	case models.FilterTypeExperience:
		return models.GetExperienceDisplayName(value)
	case models.FilterTypeSchedule:
		return models.GetScheduleDisplayName(value)
	case models.FilterTypePublishedWithin:
		if days, err := strconv.Atoi(value); err == nil {
			return "–∑–∞ " + FormatDays(days)
		}
		return "–∑–∞ " + value + " –¥–Ω–µ–π"
	default:
		return value
	}
}

func FormatDays(days int) string {
	if days <= 0 {
		return "0 –¥–Ω–µ–π"
	}

	remainder10 := days % 10
	remainder100 := days % 100

	var suffix string
	switch {
	case remainder10 == 1 && remainder100 != 11:
		suffix = "–¥–µ–Ω—å"
	case remainder10 >= 2 && remainder10 <= 4 && (remainder100 < 12 || remainder100 > 14):
		suffix = "–¥–Ω—è"
	default:
		suffix = "–¥–Ω–µ–π"
	}

	return fmt.Sprintf("%d %s", days, suffix)
}

// EscapeMarkdown escapes special characters for Telegram MarkdownV2
func EscapeMarkdown(text string) string {
	// _ * [ ] ( ) ~ ` > # + - = | { } . !
	replacer := strings.NewReplacer(
		"_", "\\_",
		"*", "\\*",
		"[", "\\[",
		"]", "\\]",
		"(", "\\(",
		")", "\\)",
		"~", "\\~",
		"`", "\\`",
		">", "\\>",
		"#", "\\#",
		"+", "\\+",
		"-", "\\-",
		"=", "\\=",
		"|", "\\|",
		"{", "\\{",
		"}", "\\}",
		".", "\\.",
		"!", "\\!",
	)

	return replacer.Replace(text)
}

func escapeMarkdownURL(url string) string {
	replacer := strings.NewReplacer(
		"(", "\\(",
		")", "\\)",
		"\\", "\\\\",
	)

	return replacer.Replace(url)
}

func TruncateString(s string, maxLen int) string {
	if maxLen <= 0 {
		return ""
	}

	runes := []rune(s)
	if len(runes) <= maxLen {
		return s
	}

	const ellipsis = "..."
	ellipsisLen := len([]rune(ellipsis))

	if maxLen <= ellipsisLen {
		return string(runes[:maxLen])
	}

	return string(runes[:maxLen-ellipsisLen]) + ellipsis
}

func formatSnippetField(raw string) string {
	cleaned := snippetHighlightReplacer.Replace(raw)
	cleaned = strings.ReplaceAll(cleaned, "\n", " ")
	cleaned = strings.Join(strings.Fields(cleaned), " ")
	if cleaned == "" {
		return ""
	}
	return TruncateString(cleaned, 180)
}
