package handlers

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"time"

	"hh-vacancy-bot/internal/bot/utils"
	"hh-vacancy-bot/internal/models"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

// User states for conversation flow
const (
	StateIdle             = ""
	StateAwaitingText     = "awaiting_text"
	StateAwaitingCity     = "awaiting_city"
	StateAwaitingSalary   = "awaiting_salary"
	StateAwaitingExp      = "awaiting_experience"
	StateAwaitingSchedule = "awaiting_schedule"
	StateAwaitingPeriod   = "awaiting_period"
	StateConfirmClear     = "confirm_clear_filters"
)

// /filters command
func HandleFilters(ctx *Context) tele.HandlerFunc {
	return func(c tele.Context) error {
		userID := c.Sender().ID

		// Clear any existing state
		if err := clearUserState(ctx, userID); err != nil {
			ctx.Logger.Warn("failed to clear user state", zap.Error(err))
		}

		message := "üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤*\n\n"
		message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

		return c.Send(
			message,
			utils.FiltersMenuKeyboard(),
			tele.ModeMarkdown,
		)
	}
}

// HandleText processes all text messages
func HandleText(ctx *Context) tele.HandlerFunc {
	return func(c tele.Context) error {
		text := strings.TrimSpace(c.Text())
		userID := c.Sender().ID

		// Check user state
		state, err := getUserState(ctx, userID)
		if err != nil {
			ctx.Logger.Warn("failed to get user state", zap.Error(err))
			state = StateIdle
		}

		// Handle state-based input
		if state != StateIdle {
			return handleStateInput(ctx, c, state)
		}

		// Handle menu buttons
		switch text {
		// Main menu
		case "üîß –§–∏–ª—å—Ç—Ä—ã":
			return HandleFilters(ctx)(c)
		case "üìã –í–∞–∫–∞–Ω—Å–∏–∏":
			return HandleVacancies(ctx)(c)
		case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			return HandleSettings(ctx)(c)
		case "‚ùì –°–ø—Ä–∞–≤–∫–∞":
			return HandleHelp(ctx)(c)

		// Filters menu
		case "üîç –¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞":
			return startTextFilter(ctx, c)
		case "üìç –ì–æ—Ä–æ–¥":
			return startCityFilter(ctx, c)
		case "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞":
			return startSalaryFilter(ctx, c)
		case "üíº –û–ø—ã—Ç":
			return startExperienceFilter(ctx, c)
		case "‚è∞ –ì—Ä–∞—Ñ–∏–∫":
			return startScheduleFilter(ctx, c)
		case "üóì –ü–µ—Ä–∏–æ–¥":
			return startPeriodFilter(ctx, c)
		case "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
			return showFilters(ctx, c)
		case "üóë –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
			return clearFilters(ctx, c)
		case "‚óÄÔ∏è –ù–∞–∑–∞–¥":
			return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", utils.MainMenuKeyboard())

		// Settings menu
		case "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
			return toggleNotifications(ctx, c)
		case "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª":
			return changeInterval(ctx, c)

		// Cancel
		case "‚ùå –û—Ç–º–µ–Ω–∞":
			return cancelConversation(ctx, c)

		default:
			// Handle interval selection
			if intervalMinutes := parseIntervalText(text); intervalMinutes > 0 {
				return saveInterval(ctx, c, intervalMinutes)
			}

			// Handle experience selection
			if models.IsValidExperience(text) {
				return saveExperience(ctx, c, text)
			}

			// Handle schedule selection
			if models.IsValidSchedule(text) {
				return saveSchedule(ctx, c, text)
			}

			return c.Reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã")
		}
	}
}

// ==================== Text Filter ====================

func startTextFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingText); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	return c.Send(
		"üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):",
		utils.CancelKeyboard(),
	)
}

func handleTextFilterInput(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())
	userID := c.Sender().ID

	if text == "" || text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		return cancelConversation(ctx, c)
	}

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	filter := &models.UserFilter{
		UserID:      userID,
		FilterType:  models.FilterTypeText,
		FilterValue: text,
	}

	if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
		ctx.Logger.Error("failed to save text filter", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		fmt.Sprintf("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%s*", utils.EscapeMarkdown(text)),
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

// ==================== City Filter ====================

func startCityFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingCity); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	message := "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥):"

	return c.Send(message, utils.CancelKeyboard())
}

func handleCityFilterInput(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())
	userID := c.Sender().ID

	if text == "" || text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		return cancelConversation(ctx, c)
	}

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	areas, err := ctx.HHClient.SearchAreas(dbCtx, text)
	if err != nil {
		ctx.Logger.Error("failed to search areas", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
	}
	if len(areas) == 0 {
		return c.Send("ü§∑ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å.")
	}

	if len(areas) == 1 {
		area := areas[0]
		filter := &models.UserFilter{
			UserID:      userID,
			FilterType:  models.FilterTypeArea,
			FilterValue: area.ID,
		}
		if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
			ctx.Logger.Error("failed to save city filter", zap.Error(err))
			return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
		}
		_ = clearUserState(ctx, userID)
		return c.Send(
			fmt.Sprintf("‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%s*", utils.EscapeMarkdown(area.Path)),
			utils.FiltersMenuKeyboard(),
			tele.ModeMarkdownV2,
		)
	}

	// multiple matches ‚Üí show inline list
	menu := &tele.ReplyMarkup{}
	var rows []tele.Row

	for _, a := range areas {
		btnText := a.Name
		if a.Path != "" {
			parts := strings.Split(a.Path, " > ")
			if len(parts) > 1 {
				// parent = parts[len(parts)-2]
				btnText = fmt.Sprintf("%s (%s)", a.Name, parts[len(parts)-2])
			}
		}
		rows = append(rows, menu.Row(menu.Data(btnText, "choose_area:"+a.ID)))
	}

	menu.Inline(rows...)
	// keep state so we know we're waiting for selection
	return c.Send("–ù–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π:", menu)
}

// ==================== Salary Filter ====================

func startSalaryFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingSalary); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	return c.Send(
		"üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000):",
		utils.CancelKeyboard(),
	)
}

func handleSalaryFilterInput(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())
	userID := c.Sender().ID

	if text == "" || text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		return cancelConversation(ctx, c)
	}

	salary, err := strconv.Atoi(text)
	if err != nil || salary <= 0 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000):")
	}

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	filter := &models.UserFilter{
		UserID:      userID,
		FilterType:  models.FilterTypeSalary,
		FilterValue: text,
	}

	if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
		ctx.Logger.Error("failed to save salary filter", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		fmt.Sprintf("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *%s ‚ÇΩ*", utils.EscapeMarkdown(text)),
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

// ==================== Experience Filter ====================

func startExperienceFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingExp); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	return c.Send(
		"üíº –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
		utils.ExperienceKeyboard(),
	)
}

func saveExperience(ctx *Context, c tele.Context, experience string) error {
	userID := c.Sender().ID

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Get experience ID from map
	expID := models.GetExperienceID(experience)

	filter := &models.UserFilter{
		UserID:      userID,
		FilterType:  models.FilterTypeExperience,
		FilterValue: expID,
	}

	if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
		ctx.Logger.Error("failed to save experience filter", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		fmt.Sprintf("‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%s*", utils.EscapeMarkdown(experience)),
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

// ==================== Schedule Filter ====================

func startScheduleFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingSchedule); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	return c.Send(
		"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
		utils.ScheduleKeyboard(),
	)
}

func saveSchedule(ctx *Context, c tele.Context, schedule string) error {
	userID := c.Sender().ID

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Get schedule ID from map
	scheduleID := models.GetScheduleID(schedule)

	filter := &models.UserFilter{
		UserID:      userID,
		FilterType:  models.FilterTypeSchedule,
		FilterValue: scheduleID,
	}

	if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
		ctx.Logger.Error("failed to save schedule filter", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		fmt.Sprintf("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%s*", utils.EscapeMarkdown(schedule)),
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

// ==================== Period Filter ====================

func startPeriodFilter(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateAwaitingPeriod); err != nil {
		ctx.Logger.Error("failed to set user state", zap.Error(err))
	}

	message := "üóì –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏?\n" +
		fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç %d –¥–æ %d –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
			models.MinPublishedWithinDays, models.MaxPublishedWithinDays)

	return c.Send(message, utils.PeriodKeyboard())
}

func handlePeriodFilterInput(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())
	userID := c.Sender().ID

	if text == "" || text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		return cancelConversation(ctx, c)
	}

	days := extractDays(text)
	if days == 0 {
		return c.Send(
			fmt.Sprintf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –æ—Ç %d –¥–æ %d –¥–Ω–µ–π.",
				models.MinPublishedWithinDays, models.MaxPublishedWithinDays),
			utils.PeriodKeyboard(),
		)
	}

	if days < models.MinPublishedWithinDays {
		days = models.MinPublishedWithinDays
	}
	if days > models.MaxPublishedWithinDays {
		days = models.MaxPublishedWithinDays
	}

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	filter := &models.UserFilter{
		UserID:      userID,
		FilterType:  models.FilterTypePublishedWithin,
		FilterValue: strconv.Itoa(days),
	}

	if err := ctx.Store.SaveFilter(dbCtx, filter); err != nil {
		ctx.Logger.Error("failed to save period filter", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		fmt.Sprintf("‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *–∑–∞ %s*", utils.EscapeMarkdown(utils.FormatDays(days))),
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

// ==================== Show & Clear Filters ====================

func showFilters(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	filters, err := ctx.Store.GetUserFilters(dbCtx, userID)
	if err != nil {
		ctx.Logger.Error("failed to get user filters", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
	}

	if len(filters) == 0 {
		return c.Send(
			"‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤",
			utils.FiltersMenuKeyboard(),
		)
	}

	message := utils.FormatFiltersMessage(filters)

	return c.Send(
		message,
		utils.FiltersMenuKeyboard(),
		tele.ModeMarkdownV2,
	)
}

func clearFilters(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := setUserState(ctx, userID, StateConfirmClear); err != nil {
		ctx.Logger.Warn("failed to set confirm clear state", zap.Error(err))
	}

	return c.Send(
		"üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã?",
		utils.ConfirmKeyboard(),
	)
}

func confirmClearFilters(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := ctx.Store.ClearUserFilters(dbCtx, userID); err != nil {
		ctx.Logger.Error("failed to clear filters", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
	}

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		"‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É–¥–∞–ª–µ–Ω—ã",
		utils.FiltersMenuKeyboard(),
	)
}

// ==================== State Management ====================

func handleStateInput(ctx *Context, c tele.Context, state string) error {
	switch state {
	case StateAwaitingText:
		return handleTextFilterInput(ctx, c)
	case StateAwaitingCity:
		return handleCityFilterInput(ctx, c)
	case StateAwaitingSalary:
		return handleSalaryFilterInput(ctx, c)
	case StateAwaitingExp:
		txt := strings.TrimSpace(c.Text())
		if !models.IsValidExperience(txt) {
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ", utils.ExperienceKeyboard())
		}
		return saveExperience(ctx, c, txt)
	case StateAwaitingSchedule:
		txt := strings.TrimSpace(c.Text())
		if !models.IsValidSchedule(txt) {
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ", utils.ScheduleKeyboard())
		}
		return saveSchedule(ctx, c, txt)
	case StateAwaitingPeriod:
		return handlePeriodFilterInput(ctx, c)
	case StateConfirmClear:
		return handleClearFiltersConfirm(ctx, c)
	default:
		_ = clearUserState(ctx, c.Sender().ID)
		return c.Reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã")
	}
}

func handleClearFiltersConfirm(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())

	switch text {
	case "‚úÖ –î–∞", "–î–∞":
		return confirmClearFilters(ctx, c)
	case "‚ùå –ù–µ—Ç", "–ù–µ—Ç", "‚ùå –û—Ç–º–µ–Ω–∞":
		return cancelConversation(ctx, c)
	default:
		return c.Send(
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
			utils.ConfirmKeyboard(),
		)
	}
}

func setUserState(ctx *Context, userID int64, state string) error {
	key := fmt.Sprintf("user:%d:state", userID)
	return ctx.Cache.SetString(context.Background(), key, state, 30*time.Minute)
}

func getUserState(ctx *Context, userID int64) (string, error) {
	key := fmt.Sprintf("user:%d:state", userID)
	return ctx.Cache.GetString(context.Background(), key)
}

func clearUserState(ctx *Context, userID int64) error {
	key := fmt.Sprintf("user:%d:state", userID)
	return ctx.Cache.Delete(context.Background(), key)
}

func cancelConversation(ctx *Context, c tele.Context) error {
	userID := c.Sender().ID

	if err := clearUserState(ctx, userID); err != nil {
		ctx.Logger.Warn("failed to clear state", zap.Error(err))
	}

	return c.Send(
		"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
		utils.FiltersMenuKeyboard(),
	)
}

// ==================== Helpers ====================

var digitsRegexp = regexp.MustCompile(`\d+`)

func extractDays(text string) int {
	match := digitsRegexp.FindString(text)
	if match == "" {
		return 0
	}

	days, err := strconv.Atoi(match)
	if err != nil {
		return 0
	}

	return days
}

func parseIntervalText(text string) int {
	switch text {
	case "15 –º–∏–Ω—É—Ç":
		return 15
	case "30 –º–∏–Ω—É—Ç":
		return 30
	case "1 —á–∞—Å":
		return 60
	case "2 —á–∞—Å–∞":
		return 120
	case "6 —á–∞—Å–æ–≤":
		return 360
	case "12 —á–∞—Å–æ–≤":
		return 720
	default:
		return 0
	}
}

func toggleNotifications(ctx *Context, c tele.Context) error {
	text := strings.TrimSpace(c.Text())
	return HandleSettingsText(ctx, c, text)
}

func changeInterval(ctx *Context, c tele.Context) error {
	return c.Send(
		"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:",
		utils.IntervalKeyboard(),
	)
}

func saveInterval(ctx *Context, c tele.Context, intervalMinutes int) error {
	userID := c.Sender().ID

	dbCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := ctx.Store.SetNotifyInterval(dbCtx, userID, intervalMinutes); err != nil {
		ctx.Logger.Error("failed to set notify interval", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
	}

	user, err := ctx.Store.GetUser(dbCtx, userID)
	if err != nil {
		ctx.Logger.Error("failed to get user", zap.Error(err))
		return c.Send("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
	}

	message := utils.FormatSettingsMessage(user)

	return c.Send(
		"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"+message,
		utils.SettingsKeyboard(user.CheckEnabled),
		tele.ModeMarkdownV2,
	)
}
